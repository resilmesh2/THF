Description
What the Plugin DOES Allow

Supported Aggregations:
The Anomaly Detection plugin only supports simple, single-level metric aggregations:
1. Basic Metric Aggregations:
python
# Simple count
"aggregation_query": {
    "total_alerts": {
        "value_count": {
            "field": "_id"
        }
    }
}

# Sum of a field
"aggregation_query": {
    "severity_sum": {
        "sum": {
            "field": "rule.level"
        }
    }
}

# Average of a field
"aggregation_query": {
    "avg_severity": {
        "avg": {
            "field": "rule.level"
        }
    }
}

# Cardinality (unique count)
"aggregation_query": {
    "unique_rules": {
        "cardinality": {
            "field": "rule.id"
        }
    }
}

# Max/Min values
"aggregation_query": {
    "max_severity": {
        "max": {
            "field": "rule.level"
        }
    }
}
2. Simple Filter Aggregations:
python
# Basic filter without sub-aggregations
"aggregation_query": {
    "high_severity_count": {
        "filter": {
            "range": {
                "rule.level": {"gte": 8}
            }
        }
    }
}

1. Threshold Detector (KRgHrZgBvo1LfHnMYrYi)
* Type: SINGLE_ENTITY (global analysis)
* Description: RCF Detector for threshold anomalies in alert volumes and severity
* Purpose: Detects overall anomalies in Wazuh alert patterns
* Features it monitors: 
o total_alerts: Count of all alerts per interval
o severity_sum: Total severity score (sum of rule.level)
o avg_severity: Average severity level
o unique_rules: Number of different rules triggered
* Detection interval: Every 10 minutes

2. Behavioural Detector (PhgHrZgBvo1LfHnMaLYl)
* Type: MULTI_ENTITY (per-host analysis via category_field: ["agent.name"])
* Description: RCF detector for per-host behavioural anomalies
* Purpose: Detects unusual behavior patterns per host
* Features it monitors: 
o host_alert_count: Alert volume per host
o host_severity_sum: Severity score per host
o host_rule_diversity: Rule variety per host
* Detection interval: Every 15 minutes

3. Failed Login Detector (oRgHrZgBvo1LfHnMbraC)
* Type: MULTI_ENTITY (per-host failed login tracking)
* Description: RCF detector for failed login attempts per host
* Purpose: Detects brute force attacks and login anomalies
* Features it monitors: 
o failed_login_count: Failed authentication attempts per host
* Filter: Only processes alerts matching failed login patterns
* Detection interval: Every 5 minutes

4. High Severity Detector (0hgHrZgBvo1LfHnMc7b3)
* Type: SINGLE_ENTITY (global high-severity analysis)
* Description: RCF detector for high severity alert spikes
* Purpose: Detects spikes in critical security alerts
* Features it monitors: 
o high_severity_count: Count of alerts with rule.level ? 8
o max_severity: Highest severity level in the interval
* Filter: Only processes alerts with rule.level >= 8
* Detection interval: Every 5 minutes


 ######  How Current Detectors Can Enhance the Three Sub-Actions  #######

  1. Threshold Detection Enhancement (detect_threshold.py)

  Current Detector Assets Available:
  - Threshold Detector (wazuh-threshold-anomaly-detector): Provides learned baselines for:
    - total_alerts (count)
    - severity_sum (sum of rule.level)
    - avg_severity (average severity)
    - unique_rules (rule diversity)

  Integration Opportunities:
  # Replace detect_threshold.py:24 hardcoded threshold
  threshold = params.get("threshold", 50)  # Static value

  # With RCF-learned dynamic thresholds from current detector
  rfc_results = await get_anomaly_results("wazuh-threshold-anomaly-detector")
  dynamic_threshold = rfc_results.get_confidence_interval(confidence_level=0.95)
  severity_threshold = rfc_results.features["avg_severity"].baseline + (2 * rfc_results.features["avg_severity"].std)

  Benefits:
  - Replace arbitrary threshold=50 with ML-learned normal ranges
  - Use severity_sum and avg_severity features for smarter severity-based thresholds
  - Leverage unique_rules for rule diversity anomaly detection

  2. Behavioral Detection Enhancement (detect_behavioral.py)

  Current Detector Assets Available:
  - Behavioral Detector (wazuh-behavioral-anomaly-detector): Per-host analysis providing:
    - host_alert_count per agent
    - host_severity_sum per agent
    - host_rule_diversity per agent

  Integration Opportunities:
  # Replace detect_behavioral.py:237-240 arbitrary ratios
  if activity_ratio > 3 or activity_ratio < 0.3:  # Hardcoded ratios

  # With RCF confidence scores from behavioral detector
  behavioral_results = await get_anomaly_results_per_entity("wazuh-behavioral-anomaly-detector", host)
  anomaly_grade = behavioral_results.features["host_alert_count"].anomaly_grade
  confidence_score = behavioral_results.confidence

  if anomaly_grade > 0.7 and confidence_score > 0.8:  # ML-derived thresholds

  Benefits:
  - Replace arbitrary 3x, 2x, 0.5x multipliers with learned behavioral baselines
  - Multi-feature behavioral analysis (alert count + severity + rule diversity simultaneously)
  - Per-host personalized baselines instead of global comparisons

  3. Trend Detection Enhancement (detect_trend.py)

  Current Detector Assets Available:
  - High Severity Detector (wazuh-high-severity-detector): Provides:
    - high_severity_count (critical alerts â‰¥8)
    - max_severity (peak severity levels)
  - Failed Login Detector (wazuh-failed-login-detector): Provides:
    - failed_login_count per host with learned patterns

  Integration Opportunities:
  # Replace detect_trend.py:186-190 hardcoded sensitivity thresholds
  trend_thresholds = {
      "low": {"slope": 0.1, "variance": 0.3}  # Static values
  }

  # With RCF trend analysis from severity and failed login detectors
  severity_trend_data = await get_anomaly_trend("wazuh-high-severity-detector")
  login_trend_data = await get_anomaly_trend("wazuh-failed-login-detector")

  # Use RCF-learned variance and trend patterns
  dynamic_slope_threshold = severity_trend_data.trend_variance * 1.5
  login_anomaly_threshold = login_trend_data.baseline_rate * 2.0

  Benefits:
  - Replace fixed slope thresholds (0.1, 0.05, 0.02) with learned trend baselines
  - Specialized trend analysis for high-severity alerts and failed logins
  - Adaptive sensitivity based on historical trend patterns

  Practical Implementation Strategy

  Immediate Wins (Within Plugin Limitations):

  1. Query RCF Results API: Access existing detector results via OpenSearch Anomaly Detection API
  2. Feature Value Integration: Use the 4 detectors' feature values as dynamic baselines
  3. Confidence Score Utilization: Replace arbitrary ratios with RCF confidence scores (0.0-1.0)
  4. Time-based Adaptation: Use detection intervals (5-15 minutes) for real-time threshold updates

  Working Within Constraints:

  1. Simple Feature Combination: Since plugin limits complex aggregations, combine multiple simple detector results
  2. Multi-Detector Correlation: Use results from all 4 detectors together for comprehensive analysis
  3. Filter Query Leverage: Utilize existing filters (failed logins, high severity) for focused analysis

The key insight is that while the OpenSearch plugin has limitations in complex analytics, the existing 4 detectors provide learned baselines that can replace the arbitrary static values currently used in all three sub-actions, significantly improving accuracy without requiring complex modifications to the plugin itself.


